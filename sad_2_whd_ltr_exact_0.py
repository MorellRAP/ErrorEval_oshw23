### This is circuit sad_2_whd_ltr_exact with gate number 0 is removed ###

from z3 import *
import sys
import time

def abs(x):
	return If(x >= 0, x, -x)



# Boolean variables declaration for the exact circuit, list of gates (included primary inputs)
i0 = Bool('i0')
i1 = Bool('i1')
i2 = Bool('i2')
i3 = Bool('i3')
i4 = Bool('i4')
i5 = Bool('i5')
i6 = Bool('i6')
i7 = Bool('i7')
i8 = Bool('i8')
i9 = Bool('i9')
g10 = Bool('g10')
g11 = Bool('g11')
g12 = Bool('g12')
g13 = Bool('g13')
g14 = Bool('g14')
g15 = Bool('g15')
g16 = Bool('g16')
g17 = Bool('g17')
g18 = Bool('g18')
g19 = Bool('g19')
g20 = Bool('g20')
g21 = Bool('g21')
g22 = Bool('g22')
g23 = Bool('g23')
g24 = Bool('g24')
g25 = Bool('g25')
g26 = Bool('g26')
g27 = Bool('g27')
g28 = Bool('g28')
g29 = Bool('g29')
g30 = Bool('g30')
g31 = Bool('g31')
g32 = Bool('g32')
g33 = Bool('g33')
g34 = Bool('g34')
g35 = Bool('g35')
g36 = Bool('g36')
g37 = Bool('g37')
g38 = Bool('g38')
g39 = Bool('g39')
g40 = Bool('g40')
g41 = Bool('g41')
g42 = Bool('g42')
g43 = Bool('g43')
g44 = Bool('g44')
g45 = Bool('g45')
g46 = Bool('g46')
g47 = Bool('g47')
g48 = Bool('g48')
g49 = Bool('g49')
g50 = Bool('g50')
g51 = Bool('g51')
g52 = Bool('g52')
g53 = Bool('g53')
g54 = Bool('g54')
g55 = Bool('g55')
g56 = Bool('g56')
g57 = Bool('g57')
g58 = Bool('g58')
g59 = Bool('g59')
g60 = Bool('g60')
g61 = Bool('g61')
g62 = Bool('g62')
g63 = Bool('g63')
g64 = Bool('g64')
g65 = Bool('g65')
g66 = Bool('g66')
g67 = Bool('g67')
g68 = Bool('g68')
g69 = Bool('g69')
g70 = Bool('g70')
g71 = Bool('g71')
g72 = Bool('g72')
g73 = Bool('g73')
g74 = Bool('g74')
g75 = Bool('g75')
g76 = Bool('g76')
g77 = Bool('g77')
g78 = Bool('g78')
g79 = Bool('g79')
g80 = Bool('g80')
g81 = Bool('g81')
g82 = Bool('g82')
g83 = Bool('g83')
g84 = Bool('g84')
g85 = Bool('g85')
g86 = Bool('g86')
g87 = Bool('g87')
g88 = Bool('g88')
g89 = Bool('g89')
g90 = Bool('g90')
g91 = Bool('g91')
g92 = Bool('g92')
g93 = Bool('g93')
g94 = Bool('g94')
g95 = Bool('g95')
g96 = Bool('g96')
g97 = Bool('g97')
g98 = Bool('g98')
g99 = Bool('g99')
g100 = Bool('g100')
g101 = Bool('g101')
g102 = Bool('g102')
g103 = Bool('g103')
g104 = Bool('g104')
g105 = Bool('g105')

# Exact circuit: edges and node types (logic functions) description
g10 = Not(i9)
g11 = Not(i8)
g12 = Not(i7)
g13 = And(i6, g11)
g14 = Not(i6)
g15 = And(i8, g14)
g16 = Or(g13, g15)
g17 = Not(i5)
g18 = Not(i4)
g19 = Not(i3)
g20 = And(i2, g18)
g21 = Not(i2)
g22 = And(i4, g21)
g23 = Or(g20, g22)
g24 = Or(g16, g23)
g25 = And(g16, g23)
g26 = Not(g25)
g27 = And(g24, g26)
g28 = Not(i1)
g29 = Or(i0, g18)
g30 = And(g17, g29)
g31 = And(i1, g30)
g32 = Or(i0, g21)
g33 = And(g19, g32)
g34 = And(i1, g33)
g35 = Or(i0, g14)
g36 = And(g12, g35)
g37 = And(i1, g36)
g38 = Or(i0, g11)
g39 = And(g10, g38)
g40 = And(i1, g39)
g41 = Not(i0)
g42 = Or(i4, g41)
g43 = And(g29, g42)
g44 = And(g28, g42)
g45 = And(i5, g44)
g46 = Or(g31, g45)
g47 = Not(g46)
g48 = Or(i2, g41)
g49 = And(g32, g48)
g50 = Or(g43, g49)
g51 = Not(g50)
g52 = And(g28, g48)
g53 = And(i3, g52)
g54 = Or(g34, g53)
g55 = And(g47, g54)
g56 = And(g46, g54)
g57 = Not(g54)
g58 = And(g46, g57)
g59 = Or(g55, g58)
g60 = Or(g51, g59)
g61 = And(g51, g59)
g62 = Or(g56, g61)
g63 = Not(g61)
g64 = And(g60, g63)
g65 = Or(i6, g41)
g66 = And(g28, g65)
g67 = And(i7, g66)
g68 = Or(g37, g67)
g69 = And(g35, g65)
g70 = Or(i8, g41)
g71 = And(g28, g70)
g72 = And(i9, g71)
g73 = Or(g40, g72)
g74 = And(g68, g73)
g75 = Not(g74)
g76 = Not(g73)
g77 = Or(g68, g76)
g78 = And(g68, g76)
g79 = Not(g78)
g80 = And(g77, g79)
g81 = And(g38, g70)
g82 = Or(g69, g81)
g83 = Or(g80, g82)
g84 = And(g75, g83)
g85 = And(g80, g82)
g86 = Not(g85)
g87 = And(g83, g86)
g88 = Or(g64, g87)
g89 = And(g25, g88)
g90 = And(g64, g87)
g91 = Or(g89, g90)
g92 = And(g84, g91)
g93 = Or(g84, g91)
g94 = Not(g93)
g95 = Or(g92, g94)
g96 = And(g62, g95)
g97 = Not(g96)
g98 = Or(g62, g95)
g99 = And(g97, g98)
g100 = Not(g90)
g101 = And(g88, g100)
g102 = And(g26, g101)
g103 = Not(g101)
g104 = And(g25, g103)
g105 = Or(g102, g104)

# Primary output vector, i.e. list of gate indexes corresponding to each primary output, starting from the LSB

out_vec = [27,105,99]

# Boolean variables declaration for the approximate circuit, list of gates (primary inputs excluded, as they are the same of the exact circuit)
a0 = Bool('a0')
a10 = Bool('a10')
a11 = Bool('a11')
a12 = Bool('a12')
a13 = Bool('a13')
a14 = Bool('a14')
a15 = Bool('a15')
a16 = Bool('a16')
a17 = Bool('a17')
a18 = Bool('a18')
a19 = Bool('a19')
a20 = Bool('a20')
a21 = Bool('a21')
a22 = Bool('a22')
a23 = Bool('a23')
a24 = Bool('a24')
a25 = Bool('a25')
a26 = Bool('a26')
a27 = Bool('a27')
a28 = Bool('a28')
a29 = Bool('a29')
a30 = Bool('a30')
a31 = Bool('a31')
a32 = Bool('a32')
a33 = Bool('a33')
a34 = Bool('a34')
a35 = Bool('a35')
a36 = Bool('a36')
a37 = Bool('a37')
a38 = Bool('a38')
a39 = Bool('a39')
a40 = Bool('a40')
a41 = Bool('a41')
a42 = Bool('a42')
a43 = Bool('a43')
a44 = Bool('a44')
a45 = Bool('a45')
a46 = Bool('a46')
a47 = Bool('a47')
a48 = Bool('a48')
a49 = Bool('a49')
a50 = Bool('a50')
a51 = Bool('a51')
a52 = Bool('a52')
a53 = Bool('a53')
a54 = Bool('a54')
a55 = Bool('a55')
a56 = Bool('a56')
a57 = Bool('a57')
a58 = Bool('a58')
a59 = Bool('a59')
a60 = Bool('a60')
a61 = Bool('a61')
a62 = Bool('a62')
a63 = Bool('a63')
a64 = Bool('a64')
a65 = Bool('a65')
a66 = Bool('a66')
a67 = Bool('a67')
a68 = Bool('a68')
a69 = Bool('a69')
a70 = Bool('a70')
a71 = Bool('a71')
a72 = Bool('a72')
a73 = Bool('a73')
a74 = Bool('a74')
a75 = Bool('a75')
a76 = Bool('a76')
a77 = Bool('a77')
a78 = Bool('a78')
a79 = Bool('a79')
a80 = Bool('a80')
a81 = Bool('a81')
a82 = Bool('a82')
a83 = Bool('a83')
a84 = Bool('a84')
a85 = Bool('a85')
a86 = Bool('a86')
a87 = Bool('a87')
a88 = Bool('a88')
a89 = Bool('a89')
a90 = Bool('a90')
a91 = Bool('a91')
a92 = Bool('a92')
a93 = Bool('a93')
a94 = Bool('a94')
a95 = Bool('a95')
a96 = Bool('a96')
a97 = Bool('a97')
a98 = Bool('a98')
a99 = Bool('a99')
a100 = Bool('a100')
a101 = Bool('a101')
a102 = Bool('a102')
a103 = Bool('a103')
a104 = Bool('a104')
a105 = Bool('a105')

# Approximate circuit: edges and node types (logic functions) description
a0 = False
a10 = Not(i9)
a11 = Not(i8)
a12 = Not(i7)
a13 = And(i6,a11)
a14 = Not(i6)
a15 = And(i8,a14)
a16 = Or(a13,a15)
a17 = Not(i5)
a18 = Not(i4)
a19 = Not(i3)
a20 = And(i2,a18)
a21 = Not(i2)
a22 = And(i4,a21)
a23 = Or(a20,a22)
a24 = Or(a16,a23)
a25 = And(a16,a23)
a26 = Not(a25)
a27 = And(a24,a26)
a28 = Not(i1)
a29 = Or(a0,a18)
a30 = And(a17,a29)
a31 = And(i1,a30)
a32 = Or(a0,a21)
a33 = And(a19,a32)
a34 = And(i1,a33)
a35 = Or(a0,a14)
a36 = And(a12,a35)
a37 = And(i1,a36)
a38 = Or(a0,a11)
a39 = And(a10,a38)
a40 = And(i1,a39)
a41 = Not(a0)
a42 = Or(i4,a41)
a43 = And(a29,a42)
a44 = And(a28,a42)
a45 = And(i5,a44)
a46 = Or(a31,a45)
a47 = Not(a46)
a48 = Or(i2,a41)
a49 = And(a32,a48)
a50 = Or(a43,a49)
a51 = Not(a50)
a52 = And(a28,a48)
a53 = And(i3,a52)
a54 = Or(a34,a53)
a55 = And(a47,a54)
a56 = And(a46,a54)
a57 = Not(a54)
a58 = And(a46,a57)
a59 = Or(a55,a58)
a60 = Or(a51,a59)
a61 = And(a51,a59)
a62 = Or(a56,a61)
a63 = Not(a61)
a64 = And(a60,a63)
a65 = Or(i6,a41)
a66 = And(a28,a65)
a67 = And(i7,a66)
a68 = Or(a37,a67)
a69 = And(a35,a65)
a70 = Or(i8,a41)
a71 = And(a28,a70)
a72 = And(i9,a71)
a73 = Or(a40,a72)
a74 = And(a68,a73)
a75 = Not(a74)
a76 = Not(a73)
a77 = Or(a68,a76)
a78 = And(a68,a76)
a79 = Not(a78)
a80 = And(a77,a79)
a81 = And(a38,a70)
a82 = Or(a69,a81)
a83 = Or(a80,a82)
a84 = And(a75,a83)
a85 = And(a80,a82)
a86 = Not(a85)
a87 = And(a83,a86)
a88 = Or(a64,a87)
a89 = And(a25,a88)
a90 = And(a64,a87)
a91 = Or(a89,a90)
a92 = And(a84,a91)
a93 = Or(a84,a91)
a94 = Not(a93)
a95 = Or(a92,a94)
a96 = And(a62,a95)
a97 = Not(a96)
a98 = Or(a62,a95)
a99 = And(a97,a98)
a100 = Not(a90)
a101 = And(a88,a100)
a102 = And(a26,a101)
a103 = Not(a101)
a104 = And(a25,a103)
a105 = Or(a102,a104)
# Approx. circuit: Declaration of integer variables for the weights of each primaty output bit, followed by the weight assignment
o0_xor = Bool('o0_xor')
o1_xor = Bool('o1_xor')
o2_xor = Bool('o2_xor')

o0_xor = Xor(g27, a27)
o1_xor = Xor(g105, a105)
o2_xor = Xor(g99, a99)

o0_xor_int = Int('o0_xor_int')
o0_xor_int = o0_xor * 2/2
o1_xor_int = Int('o1_xor_int')
o1_xor_int = o1_xor * 2/2
o2_xor_int = Int('o2_xor_int')
o2_xor_int = o2_xor * 2/2
f = Function('f', IntSort(), IntSort(), IntSort(), IntSort() )
WCE      = 0
ET       = 0
pre_ET = 0
zero_tested = False
ET_array = []
call_status_array = []
foundWCE = False
num_sats = 0
num_unsats = 0
unsat_time=0
max = 3
start_whole = time.time()
s = Solver()
while(foundWCE != True):
	start_current = time.time()
	s.push()
	if ET == 0:
		zero_tested = True
	s.add(f(o0_xor_int, o1_xor_int, o2_xor_int) == o0_xor_int + o1_xor_int + o2_xor_int)
	s.add(f(o0_xor_int, o1_xor_int, o2_xor_int) > ET )
	print('ET = ', ET)
	pre_ET = ET
	c = s.check()
	if c == sat:
		print('sat')
		num_sats += 1
		m = s.model()
		print(f'{Model = }', m)
		print(f'{m[f].else_value() = }')
		returned = m[m[len(m)-1]].else_value().as_long()
		ET = returned
		re_eval = m.evaluate( f(o0_xor_int, o1_xor_int, o2_xor_int) ).as_long()
		print('re_eval = ', re_eval)
		if m[f].else_value().as_long() == re_eval:
			print("Re-Evaluation Passed!")
			if returned < 0:
				returned = returned * -1
		elif m[f].else_value().as_long() != re_eval:
			print("ERROR! this seems to trigger a bug of z3 ********************")
			print("Exiting...")
			exit()
		status = "sat, "+ str(pre_ET) + ", "+ str(ET) 
		call_status_array.append(status)
		if ET == max:
			foundWCE = True
			WCE = ET
		else:
			print('next ET = ', ET)
		ET_array.append(ET)
	elif c == unsat:
		status = "unsat, "+ str(pre_ET)
		call_status_array.append(status)
		num_unsats += 1
		print('unsat') 
		end_current = time.time()
		WCE = ET
		foundWCE = True
	s.pop()
end_whole = time.time()
print("Finished processing, WHD == ", WCE)
output_file = "weights/z3_tmp_whd_weights_ltr_exact.txt"
f = open(output_file, 'a')
f.write(str(WCE)+"\n")
f.close()
if num_unsats == 0:
	unsat_time = 0
else:
	unsat_time = end_current - start_current
output_file_performance = "log/z3_tmp_whd_log_ltr_exact.txt"

f = open(output_file_performance, 'a')
f.write(str(end_whole-start_whole)+","+str(num_sats)+","+str(num_unsats)+","+str(unsat_time)+"\n")
f.close()


output_ET_file_name = "ET_whd_acc_sad_2_ltr_exact.txt"
output_ET_file = "et/"+output_ET_file_name
if os.path.isfile(output_ET_file):
	os.remove(output_ET_file)
f = open(output_ET_file, "a")
for i in range(len(ET_array)):
	if i == len(ET_array) - 1:
		f.write(str(ET_array[i]))
	else:
		f.write(str(ET_array[i])+",")
f.close()


output_call_file_name = "call_whd_acc_sad_2_ltr_exact.txt"
output_call_file = "et/"+output_call_file_name
if os.path.isfile(output_call_file):
	os.remove(output_call_file)
f = open(output_call_file, "a")
for i in range(len(call_status_array)):
	f.write(str(call_status_array[i])+"\n")
f.close()
