#This circuit has 30% of its gates removed!
from z3 import *
import sys
import time
import csv

def abs(x):
	return If(x >= 0, x, -x)



# Boolean variables declaration for the exact circuit, list of gates (included primary inputs)
g0 = Bool('g0')
g1 = Bool('g1')
g2 = Bool('g2')
g3 = Bool('g3')
g4 = Bool('g4')
g5 = Bool('g5')
g6 = Bool('g6')
g7 = Bool('g7')
g8 = Bool('g8')
g9 = Bool('g9')
g10 = Bool('g10')
g11 = Bool('g11')
g12 = Bool('g12')
g13 = Bool('g13')
g14 = Bool('g14')
g15 = Bool('g15')
g16 = Bool('g16')
g17 = Bool('g17')
g18 = Bool('g18')
g19 = Bool('g19')
g20 = Bool('g20')
g21 = Bool('g21')
g22 = Bool('g22')
g23 = Bool('g23')
g24 = Bool('g24')
g25 = Bool('g25')
g26 = Bool('g26')
g27 = Bool('g27')
g28 = Bool('g28')
g29 = Bool('g29')
g30 = Bool('g30')
g31 = Bool('g31')
g32 = Bool('g32')
g33 = Bool('g33')
g34 = Bool('g34')
g35 = Bool('g35')
g36 = Bool('g36')
g37 = Bool('g37')
g38 = Bool('g38')
g39 = Bool('g39')
g40 = Bool('g40')
g41 = Bool('g41')
g42 = Bool('g42')
g43 = Bool('g43')
g44 = Bool('g44')
g45 = Bool('g45')
g46 = Bool('g46')
g47 = Bool('g47')
g48 = Bool('g48')
g49 = Bool('g49')
g50 = Bool('g50')
g51 = Bool('g51')
g52 = Bool('g52')
g53 = Bool('g53')
g54 = Bool('g54')
g55 = Bool('g55')
g56 = Bool('g56')
g57 = Bool('g57')
g58 = Bool('g58')
g59 = Bool('g59')
g60 = Bool('g60')
g61 = Bool('g61')
g62 = Bool('g62')
g63 = Bool('g63')
g64 = Bool('g64')
g65 = Bool('g65')
g66 = Bool('g66')
g67 = Bool('g67')
g68 = Bool('g68')
g69 = Bool('g69')
g70 = Bool('g70')
g71 = Bool('g71')
g72 = Bool('g72')
g73 = Bool('g73')
g74 = Bool('g74')
g75 = Bool('g75')
g76 = Bool('g76')
g77 = Bool('g77')
g78 = Bool('g78')
g79 = Bool('g79')
g80 = Bool('g80')
g81 = Bool('g81')
g82 = Bool('g82')
g83 = Bool('g83')
g84 = Bool('g84')
g85 = Bool('g85')
g86 = Bool('g86')
g87 = Bool('g87')
g88 = Bool('g88')
g89 = Bool('g89')
g90 = Bool('g90')
g91 = Bool('g91')
g92 = Bool('g92')
g93 = Bool('g93')
g94 = Bool('g94')
g95 = Bool('g95')
g96 = Bool('g96')
g97 = Bool('g97')
g98 = Bool('g98')
g99 = Bool('g99')
g100 = Bool('g100')
g101 = Bool('g101')
g102 = Bool('g102')
g103 = Bool('g103')
g104 = Bool('g104')
g105 = Bool('g105')
g106 = Bool('g106')
g107 = Bool('g107')
g108 = Bool('g108')
g109 = Bool('g109')
g110 = Bool('g110')
g111 = Bool('g111')
g112 = Bool('g112')
g113 = Bool('g113')
g114 = Bool('g114')

# Exact circuit: edges and node types (logic functions) description
g16 = Not(g15)
g17 = Not(g14)
g18 = Not(g13)
g19 = Not(g12)
g20 = Not(g11)
g21 = Not(g10)
g22 = Not(g9)
g23 = Not(g8)
g24 = Not(And(g7,g15))
g25 = Not(g7)
g26 = Not(And(g16,g25))
g27 = Not(And(g15,g25))
g28 = Not(And(g7,g16))
g29 = Not(And(g27,g28))
g30 = Not(And(g6,g14))
g31 = Not(g6)
g32 = Not(And(g17,g31))
g33 = Not(And(g14,g31))
g34 = Not(And(g6,g17))
g35 = Not(And(g33,g34))
g36 = Not(And(g5,g13))
g37 = Not(g5)
g38 = Not(And(g18,g37))
g39 = Not(And(g13,g37))
g40 = Not(And(g5,g18))
g41 = Not(And(g39,g40))
g42 = Not(And(g4,g12))
g43 = Not(g4)
g44 = Not(And(g19,g43))
g45 = Not(And(g12,g43))
g46 = Not(And(g4,g19))
g47 = Not(And(g45,g46))
g48 = Not(And(g3,g11))
g49 = Not(g3)
g50 = Not(And(g20,g49))
g51 = Not(And(g11,g49))
g52 = Not(And(g3,g20))
g53 = Not(And(g51,g52))
g54 = Not(And(g2,g10))
g55 = Not(g2)
g56 = Not(And(g21,g55))
g57 = Not(And(g10,g55))
g58 = Not(And(g2,g21))
g59 = Not(And(g57,g58))
g60 = Not(And(g1,g9))
g61 = Not(g1)
g62 = Not(And(g9,g61))
g63 = Not(And(g1,g22))
g64 = Not(And(g62,g63))
g65 = Not(And(g0,g1))
g66 = Not(Or(g23,g65))
g67 = Not(And(g0,g8))
g68 = Not(Or(g22,g67))
g69 = Not(Or(g66,g68))
g70 = Not(And(g60,g69))
g71 = Not(And(g56,g70))
g72 = Not(And(g54,g71))
g73 = Not(And(g50,g72))
g74 = Not(And(g48,g73))
g75 = Not(And(g44,g74))
g76 = Not(And(g42,g75))
g77 = Not(And(g38,g76))
g78 = Not(And(g36,g77))
g79 = Not(And(g32,g78))
g80 = Not(And(g30,g79))
g81 = Not(And(g26,g80))
g82 = Not(And(g24,g81))
g83 = Not(Or(g29,g80))
g84 = Not(And(g29,g80))
g85 = Not(g84)
g86 = Not(Or(g83,g85))
g87 = Not(Or(g35,g78))
g88 = Not(And(g35,g78))
g89 = Not(g88)
g90 = Not(Or(g87,g89))
g91 = Not(Or(g41,g76))
g92 = Not(And(g41,g76))
g93 = Not(g92)
g94 = Not(Or(g91,g93))
g95 = Not(Or(g47,g74))
g96 = Not(And(g47,g74))
g97 = Not(g96)
g98 = Not(Or(g95,g97))
g99 = Not(Or(g53,g72))
g100 = Not(And(g53,g72))
g101 = Not(g100)
g102 = Not(Or(g99,g101))
g103 = Not(Or(g59,g70))
g104 = Not(And(g59,g70))
g105 = Not(g104)
g106 = Not(Or(g103,g105))
g107 = Not(Or(g64,g67))
g108 = Not(g107)
g109 = Not(And(g64,g67))
g110 = Not(And(g108,g109))
g111 = Not(g0)
g112 = Not(And(g8,g111))
g113 = Not(And(g0,g23))
g114 = Not(And(g112,g113))

# Primary output vector, i.e. list of gate indexes corresponding to each primary output, starting from the LSB

out_vec = [114,110,106,102,98,94,90,86,82]

# Declaration of integer variables for the weights of each primaty output bit, followed by the weight assignment
w_exa_o0 = Int('w_exa_o0')
w_exa_o0 = g114*1
w_exa_o1 = Int('w_exa_o1')
w_exa_o1 = g110*2
w_exa_o2 = Int('w_exa_o2')
w_exa_o2 = g106*4
w_exa_o3 = Int('w_exa_o3')
w_exa_o3 = g102*8
w_exa_o4 = Int('w_exa_o4')
w_exa_o4 = g98*16
w_exa_o5 = Int('w_exa_o5')
w_exa_o5 = g94*32
w_exa_o6 = Int('w_exa_o6')
w_exa_o6 = g90*64
w_exa_o7 = Int('w_exa_o7')
w_exa_o7 = g86*128
w_exa_o8 = Int('w_exa_o8')
w_exa_o8 = g82*256
# Definition and expression of the integer value of the output for the exact circuit

int_exa_out = Int('int_exa_out')
int_exa_out = w_exa_o0 + w_exa_o1 + w_exa_o2 + w_exa_o3 + w_exa_o4 + w_exa_o5 + w_exa_o6 + w_exa_o7 + w_exa_o8
# Boolean variables declaration for the approximate circuit, list of gates (primary inputs excluded, as they are the same of the exact circuit)
a5 = Bool('a5')
a9 = Bool('a9')
a2 = Bool('a2')
a11 = Bool('a11')
a3 = Bool('a3')
a16 = Bool('a16')
a17 = Bool('a17')
a18 = Bool('a18')
a19 = Bool('a19')
a20 = Bool('a20')
a21 = Bool('a21')
a22 = Bool('a22')
a23 = Bool('a23')
a24 = Bool('a24')
a25 = Bool('a25')
a26 = Bool('a26')
a27 = Bool('a27')
a28 = Bool('a28')
a29 = Bool('a29')
a30 = Bool('a30')
a31 = Bool('a31')
a32 = Bool('a32')
a33 = Bool('a33')
a34 = Bool('a34')
a35 = Bool('a35')
a36 = Bool('a36')
a37 = Bool('a37')
a38 = Bool('a38')
a39 = Bool('a39')
a40 = Bool('a40')
a41 = Bool('a41')
a42 = Bool('a42')
a43 = Bool('a43')
a44 = Bool('a44')
a45 = Bool('a45')
a46 = Bool('a46')
a47 = Bool('a47')
a48 = Bool('a48')
a49 = Bool('a49')
a50 = Bool('a50')
a51 = Bool('a51')
a52 = Bool('a52')
a53 = Bool('a53')
a54 = Bool('a54')
a55 = Bool('a55')
a56 = Bool('a56')
a57 = Bool('a57')
a58 = Bool('a58')
a59 = Bool('a59')
a60 = Bool('a60')
a61 = Bool('a61')
a62 = Bool('a62')
a63 = Bool('a63')
a64 = Bool('a64')
a65 = Bool('a65')
a66 = Bool('a66')
a67 = Bool('a67')
a68 = Bool('a68')
a69 = Bool('a69')
a70 = Bool('a70')
a71 = Bool('a71')
a72 = Bool('a72')
a73 = Bool('a73')
a74 = Bool('a74')
a75 = Bool('a75')
a76 = Bool('a76')
a77 = Bool('a77')
a78 = Bool('a78')
a79 = Bool('a79')
a80 = Bool('a80')
a81 = Bool('a81')
a82 = Bool('a82')
a83 = Bool('a83')
a84 = Bool('a84')
a85 = Bool('a85')
a86 = Bool('a86')
a87 = Bool('a87')
a88 = Bool('a88')
a89 = Bool('a89')
a90 = Bool('a90')
a91 = Bool('a91')
a92 = Bool('a92')
a93 = Bool('a93')
a94 = Bool('a94')
a95 = Bool('a95')
a96 = Bool('a96')
a97 = Bool('a97')
a98 = Bool('a98')
a99 = Bool('a99')
a100 = Bool('a100')
a101 = Bool('a101')
a102 = Bool('a102')
a103 = Bool('a103')
a104 = Bool('a104')
a105 = Bool('a105')
a106 = Bool('a106')
a107 = Bool('a107')
a108 = Bool('a108')
a109 = Bool('a109')
a110 = Bool('a110')
a111 = Bool('a111')
a112 = Bool('a112')
a113 = Bool('a113')
a114 = Bool('a114')

# Approximate circuit: edges and node types (logic functions) description
a5 = False
a9 = False
a2 = False
a11 = False
a3 = False
a16 = Not(g15)
a17 = False
a18 = Not(g13)
a19 = False
a20 = Not(a11)
a21 = Not(g10)
a22 = Not(a9)
a23 = Not(g8)
a24 = False
a25 = Not(g7)
a26 = Not(And(a16,a25))
a27 = Not(And(g15,a25))
a28 = Not(And(g7,a16))
a29 = Not(And(a27,a28))
a30 = Not(And(g6,g14))
a31 = False
a32 = Not(And(a17,a31))
a33 = Not(And(g14,a31))
a34 = Not(And(g6,a17))
a35 = Not(And(a33,a34))
a36 = Not(And(a5,g13))
a37 = Not(a5)
a38 = Not(And(a18,a37))
a39 = Not(And(g13,a37))
a40 = Not(And(a5,a18))
a41 = Not(And(a39,a40))
a42 = Not(And(g4,g12))
a43 = False
a44 = Not(And(a19,a43))
a45 = Not(And(g12,a43))
a46 = Not(And(g4,a19))
a47 = Not(And(a45,a46))
a48 = Not(And(a3,a11))
a49 = False
a50 = Not(And(a20,a49))
a51 = False
a52 = Not(And(a3,a20))
a53 = Not(And(a51,a52))
a54 = False
a55 = False
a56 = Not(And(a21,a55))
a57 = False
a58 = False
a59 = False
a60 = Not(And(g1,a9))
a61 = Not(g1)
a62 = False
a63 = Not(And(g1,a22))
a64 = False
a65 = False
a66 = Not(Or(a23,a65))
a67 = False
a68 = Not(Or(a22,a67))
a69 = Not(Or(a66,a68))
a70 = False
a71 = Not(And(a56,a70))
a72 = False
a73 = False
a74 = Not(And(a48,a73))
a75 = False
a76 = Not(And(a42,a75))
a77 = Not(And(a38,a76))
a78 = Not(And(a36,a77))
a79 = Not(And(a32,a78))
a80 = False
a81 = Not(And(a26,a80))
a82 = Not(And(a24,a81))
a83 = False
a84 = Not(And(a29,a80))
a85 = Not(a84)
a86 = Not(Or(a83,a85))
a87 = Not(Or(a35,a78))
a88 = Not(And(a35,a78))
a89 = Not(a88)
a90 = Not(Or(a87,a89))
a91 = Not(Or(a41,a76))
a92 = Not(And(a41,a76))
a93 = False
a94 = Not(Or(a91,a93))
a95 = Not(Or(a47,a74))
a96 = Not(And(a47,a74))
a97 = Not(a96)
a98 = Not(Or(a95,a97))
a99 = False
a100 = Not(And(a53,a72))
a101 = Not(a100)
a102 = Not(Or(a99,a101))
a103 = False
a104 = Not(And(a59,a70))
a105 = False
a106 = Not(Or(a103,a105))
a107 = Not(Or(a64,a67))
a108 = Not(a107)
a109 = Not(And(a64,a67))
a110 = Not(And(a108,a109))
a111 = Not(g0)
a112 = Not(And(g8,a111))
a113 = Not(And(g0,a23))
a114 = False
# Approx. circuit: Declaration of integer variables for the weights of each primaty output bit, followed by the weight assignment
w_app_o0 = Int('w_app_o0')
w_app_o0 = a114* 2 / 2
w_app_o1 = Int('w_app_o1')
w_app_o1 = a110*2
w_app_o2 = Int('w_app_o2')
w_app_o2 = a106*4
w_app_o3 = Int('w_app_o3')
w_app_o3 = a102*8
w_app_o4 = Int('w_app_o4')
w_app_o4 = a98*16
w_app_o5 = Int('w_app_o5')
w_app_o5 = a94*32
w_app_o6 = Int('w_app_o6')
w_app_o6 = a90*64
w_app_o7 = Int('w_app_o7')
w_app_o7 = a86*128
w_app_o8 = Int('w_app_o8')
w_app_o8 = a82*256

int_app_out = Int('int_app_out')
int_app_out = w_app_o0 + w_app_o1 + w_app_o2 + w_app_o3 + w_app_o4 + w_app_o5 + w_app_o6 + w_app_o7 + w_app_o8

f = Function('f', IntSort(), IntSort(), IntSort())
foundWCE = False
WCE      = 0
ET       = 0
num_sats = 0
num_unsats = 0
unsat_time=0
sat_time=0
et_list = []
start_whole = time.time()
s = Solver()
while(foundWCE != True):
	start_current = time.time()
	s.push()
	s.add(f(int_exa_out, int_app_out) == int_exa_out - int_app_out)
	s.add(abs(f(int_exa_out, int_app_out)) > ET)

	print('ET = ', ET)
	c = s.check()
	if c == sat:
		print('sat')
		num_sats += 1
		m = s.model()
		print("Model = ", m)
		print("Else case = ", m[m[len(m)-1]])
		for d in m:
			if d == f:
				print(f'{d = }')
				print(f'{type(d) = }')
				print(f'{m[f].else_value() = }')
		
		returned_value = m[m[len(m)-1]].else_value().as_long()
		ET = returned_value
		re_eval = m.evaluate(f(int_exa_out, int_app_out)).as_long()
		if ET == re_eval:
			print("Re-Evaluation Passed!")
			if ET < 0:
				ET = ET * -1
			print('next ET = ', ET)
			end_current = time.time()
			sat_time += end_current - start_current
		elif ET != re_eval:
			print("ERROR! this seems to trigger a bug of z3 ********************")
			Error = True
			foundWCE = True
			end_current = time.time()
	elif c == unsat:
		num_unsats +=1 
		print('unsat') 
		end_current = time.time()
		WCE = ET
		foundWCE = True
	s.pop()
end_whole = time.time()
print("Finished processing, WCE == ", WCE)
unsat_time = end_current - start_current
with open('report/adder_i16_o9_wae_random/report_adder_i16_o9_p30_g34_tg115.csv', 'w') as f:
    csvwriter = csv.writer(f)
    header = ['field', 'value']
    csvwriter.writerow(header)
    csvwriter.writerow(['Experiment', f'random-pruning'])
    csvwriter.writerow(['Total gates', f'115'])
    csvwriter.writerow(['Pruned gates', f'34'])
    csvwriter.writerow(['Pruned percentage', f'30'])
    csvwriter.writerow(['WCE', WCE])
    csvwriter.writerow(['Total Runtime', end_whole-start_whole])
    csvwriter.writerow(['UNSAT Runtime', unsat_time])
    csvwriter.writerow(['SAT Runtime', sat_time])
    csvwriter.writerow(['Number of SAT calls', num_sats])
    csvwriter.writerow(['Number of UNSAT calls', num_unsats])

